{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport PropTypes from \"prop-types\";\nimport AppIntroSlider from \"react-native-app-intro-slider\";\nimport dynamicStyles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar WalkthroughScreen = function WalkthroughScreen(props) {\n  var appConfig = props.appConfig;\n  var appStyles = props.appStyles;\n  var colorScheme = useColorScheme();\n  var styles = dynamicStyles(appStyles, colorScheme);\n  var slides = appConfig.onboardingConfig.walkthroughScreens.map(function (screenSpec, index) {\n    return {\n      key: `${index}`,\n      text: screenSpec.description,\n      title: screenSpec.title,\n      image: screenSpec.icon\n    };\n  });\n  var _renderItem = function _renderItem(_ref) {\n    var item = _ref.item,\n      dimensions = _ref.dimensions;\n    return _jsxs(View, {\n      style: [styles.container, dimensions],\n      children: [_jsx(Image, {\n        style: styles.image,\n        source: item.image,\n        size: 100,\n        color: \"white\"\n      }), _jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: item.title\n        }), _jsx(Text, {\n          style: styles.text,\n          children: item.text\n        })]\n      })]\n    });\n  };\n  return _jsx(AppIntroSlider, {\n    data: slides,\n    slides: slides,\n    renderItem: _renderItem,\n    showSkipButton: false,\n    showDoneButton: false,\n    showNextButton: false\n  });\n};\nWalkthroughScreen.propTypes = {\n  appStyles: PropTypes.object,\n  appConfig: PropTypes.object\n};\nexport default WalkthroughScreen;","map":{"version":3,"names":["React","View","Image","Text","useColorScheme","PropTypes","AppIntroSlider","dynamicStyles","jsx","_jsx","jsxs","_jsxs","WalkthroughScreen","props","appConfig","appStyles","colorScheme","styles","slides","onboardingConfig","walkthroughScreens","map","screenSpec","index","key","text","description","title","image","icon","_renderItem","_ref","item","dimensions","style","container","children","source","size","color","data","renderItem","showSkipButton","showDoneButton","showNextButton","propTypes","object"],"sources":["/Users/donnie/Downloads/react-native-walkthrough-master/src/screens/WalkthroughScreen/WalkthroughScreen.js"],"sourcesContent":["import React from \"react\";\nimport { View, Image, Text, useColorScheme } from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport AppIntroSlider from \"react-native-app-intro-slider\";\nimport dynamicStyles from \"./styles\";\n\nconst WalkthroughScreen = (props) => {\n  const appConfig = props.appConfig;\n  const appStyles = props.appStyles;\n  const colorScheme = useColorScheme();\n  const styles = dynamicStyles(appStyles, colorScheme);\n\n  const slides = appConfig.onboardingConfig.walkthroughScreens.map(\n    (screenSpec, index) => {\n      return {\n        key: `${index}`,\n        text: screenSpec.description,\n        title: screenSpec.title,\n        image: screenSpec.icon,\n      };\n    }\n  );\n\n  const _renderItem = ({ item, dimensions }) => (\n    <View style={[styles.container, dimensions]}>\n      <Image\n        style={styles.image}\n        source={item.image}\n        size={100}\n        color=\"white\"\n      />\n      <View>\n        <Text style={styles.title}>{item.title}</Text>\n        <Text style={styles.text}>{item.text}</Text>\n      </View>\n    </View>\n  );\n\n  return (\n    <AppIntroSlider\n      data={slides}\n      slides={slides}\n      renderItem={_renderItem}\n      //Handler for the done On last slide\n      showSkipButton={false}\n      showDoneButton={false}\n      showNextButton={false}\n    />\n  );\n};\n\nWalkthroughScreen.propTypes = {\n  appStyles: PropTypes.object,\n  appConfig: PropTypes.object,\n};\n\nexport default WalkthroughScreen;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,cAAA;AAE1B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,OAAOC,aAAa;AAAiB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAK,EAAK;EACnC,IAAMC,SAAS,GAAGD,KAAK,CAACC,SAAS;EACjC,IAAMC,SAAS,GAAGF,KAAK,CAACE,SAAS;EACjC,IAAMC,WAAW,GAAGZ,cAAc,CAAC,CAAC;EACpC,IAAMa,MAAM,GAAGV,aAAa,CAACQ,SAAS,EAAEC,WAAW,CAAC;EAEpD,IAAME,MAAM,GAAGJ,SAAS,CAACK,gBAAgB,CAACC,kBAAkB,CAACC,GAAG,CAC9D,UAACC,UAAU,EAAEC,KAAK,EAAK;IACrB,OAAO;MACLC,GAAG,EAAG,GAAED,KAAM,EAAC;MACfE,IAAI,EAAEH,UAAU,CAACI,WAAW;MAC5BC,KAAK,EAAEL,UAAU,CAACK,KAAK;MACvBC,KAAK,EAAEN,UAAU,CAACO;IACpB,CAAC;EACH,CACF,CAAC;EAED,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA;IAAA,IAAMC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAA,OACrCtB,KAAA,CAACV,IAAI;MAACiC,KAAK,EAAE,CAACjB,MAAM,CAACkB,SAAS,EAAEF,UAAU,CAAE;MAAAG,QAAA,GAC1C3B,IAAA,CAACP,KAAK;QACJgC,KAAK,EAAEjB,MAAM,CAACW,KAAM;QACpBS,MAAM,EAAEL,IAAI,CAACJ,KAAM;QACnBU,IAAI,EAAE,GAAI;QACVC,KAAK,EAAC;MAAO,CACd,CAAC,EACF5B,KAAA,CAACV,IAAI;QAAAmC,QAAA,GACH3B,IAAA,CAACN,IAAI;UAAC+B,KAAK,EAAEjB,MAAM,CAACU,KAAM;UAAAS,QAAA,EAAEJ,IAAI,CAACL;QAAK,CAAO,CAAC,EAC9ClB,IAAA,CAACN,IAAI;UAAC+B,KAAK,EAAEjB,MAAM,CAACQ,IAAK;UAAAW,QAAA,EAAEJ,IAAI,CAACP;QAAI,CAAO,CAAC;MAAA,CACxC,CAAC;IAAA,CACH,CAAC;EAAA,CACR;EAED,OACEhB,IAAA,CAACH,cAAc;IACbkC,IAAI,EAAEtB,MAAO;IACbA,MAAM,EAAEA,MAAO;IACfuB,UAAU,EAAEX,WAAY;IAExBY,cAAc,EAAE,KAAM;IACtBC,cAAc,EAAE,KAAM;IACtBC,cAAc,EAAE;EAAM,CACvB,CAAC;AAEN,CAAC;AAEDhC,iBAAiB,CAACiC,SAAS,GAAG;EAC5B9B,SAAS,EAAEV,SAAS,CAACyC,MAAM;EAC3BhC,SAAS,EAAET,SAAS,CAACyC;AACvB,CAAC;AAED,eAAelC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}